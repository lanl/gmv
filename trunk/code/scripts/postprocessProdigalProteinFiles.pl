#!/usr/bin/perl

use strict;
use Getopt::Std;
use Cwd;


sub printOptions
{
	print("Usage :: perl postprocessProdigalProteinFiles.pl\n");
	print("-d  Working directory. <REQUIRED> \n");
	print("-v  Logging level. 1 is ERROR, 2 is WARNING, 3 is INFO. Default is 1.\n");
	print("-l  Log file with complete path. Default - Log messages will be written to standard output.\n");
	print("-p  Perl directory. <REQUIRED> \n");
	print("-s  Scripts directory. <REQUIRED> \n");


}
sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

sub processHeader
{

	my $str = shift;
	my $return_str ="";
	if($str ne "")
	{
		my @pieces = split(/\#/,$str);
		my $num = @pieces;
		if($num eq 4) 
		{
			my $protein_name = trim($pieces[0]);
			$protein_name =~ s/>//;
			my $start = trim($pieces[1]);
			my $end = trim($pieces[2]);
			my $direction = trim($pieces[3]);

			my $protein_len = ((($end-$start+1)/3)-1);
			
			$return_str = "$protein_name,$start,$end,$direction,$protein_len";

		}
		


	}

	return $return_str;

}

sub padIndex
{
	my $str = shift;
	my $index_len = shift;
	
	my $str_len = length($str);
	my $return_str = $str;
	
	if($str_len < $index_len)
	{
		for(my $i=1; $i <= $index_len-$str_len; $i++)
		{
			$return_str = "0".$return_str;
		}

	}

	return $return_str;

}


sub getIndexLength
{
	my $str = shift;

	my $len = length($str);

	return $len;

}
	

sub padHeader
{

	my $header = shift;
	my $max_num = shift;

	my $idx_length = getIndexLength($max_num);

	my $return_header = $header;
	
	if($header ne "")
	{
		my @header_pieces = split(/\#/,"$header");
		my $header_len = @header_pieces;

		my $gene_name = $header_pieces[0];
		$gene_name = trim($gene_name);
		

		my @gene_name_pieces = split(/_/,$gene_name);
		my $count = @gene_name_pieces;
		
		if($count eq 3)
		{
			my $gene_idx = trim($gene_name_pieces[2]);
			my $padded_gene_idx = padIndex($gene_idx,$idx_length);

			$return_header = $gene_name_pieces[0]."_".$gene_name_pieces[1]."_".$padded_gene_idx;

			for(my $i=1; $i<$header_len;$i++)
			{

				$return_header = $return_header. " # ". trim($header_pieces[$i]);
			}
	
			

		}
	}

	return $return_header


}


sub main
{
	our($opt_d,$opt_v,$opt_l,$opt_p,$opt_s);

	getopt("dvlsp");

	if((not defined $opt_d) || (not defined $opt_p) || (not defined $opt_s))
	{
		printOptions;
		exit(-1);
	
	}
	
	
	my $working_dir = $opt_d;
	my $log = $opt_v;
	my $log_file = $opt_l;
	my $perl_dir = $opt_p;
	my $scripts_dir = $opt_s;


	if(not defined $log)
	{
		$log = 1;
	}

	my $message = "Logging messages from postprocessProdigalProteinFiles.pl......";
	my $priority = 2;
	system "$perl_dir/perl $scripts_dir/logging.pl -v $log -l \'$log_file\' -p $priority -m \'$message\'";


	
	if(-d "$working_dir/fasta/")
	{
		chdir("$working_dir/fasta/");
	}
	else
	{
		$message = "Directory $working_dir/fasta/ does not exist.";
		$priority = 1;
		system "$perl_dir/perl $scripts_dir/logging.pl -v $log -l \'$log_file\' -p $priority -m \'$message\'";

		exit(-1);
	}
	
	my $protein_len_file = "$working_dir/proteins-length.txt";

	open(PROTEIN_OUT,">$protein_len_file") or die("Could not open $protein_len_file\n");


	
	my $lst = `ls`;
	my @pcs = split(/\n/,"$lst");



	foreach my $genome_dir (@pcs)
	{
		chomp($genome_dir);


		my $prodigal_protein_dir = "$working_dir/fasta/$genome_dir/prodigal_results/proteins";
		chdir($prodigal_protein_dir);
		##for each protein file in the proteins dir, replace the names generated by prodigal for the proteins with new names - G<i>_D<j>_<k>
		

		my $seq_lst = `ls`;
		my @files = split(/\n/,$seq_lst);

		
		foreach my $file (@files)
		{
			chomp($file);
			if(not $file =~ m/~/)
			{
				if($file =~ m/-proteins/)
				{
					my $protein_file = $file;
					my $identifier = $protein_file;
					$identifier =~ s/-proteins//;

					my $backup_file = "$working_dir/fasta/$genome_dir/prodigal_results/proteins/$identifier-backup";
					my $protein_file_path = "$working_dir/fasta/$genome_dir/prodigal_results/proteins/$protein_file";

					system "cp $protein_file_path $backup_file";

					## get the total number of proteins

					my $num_proteins = `cat $backup_file | grep \'>\' | wc -l`;
					$num_proteins = trim($num_proteins);
					
				
					## replace "Prodigal Genes" by the identifier

					open(INPUT, "$backup_file") or die("Could not open $backup_file\n");	
					my @data = <INPUT>;
					close INPUT;


					open(OUT,">$protein_file_path") or die("Could not open $protein_file_path\n");

					foreach my $line (@data)
					{
						chomp($line);
						if($line =~ m/>/)
						{
							
							my $header = trim($line);		
					
							##Modified by Sindhu to account for changes in Prodigal 02-10-2011
							$header =~ s/>Prodigal_Seq_//;
							$header = trim($header);
							#$header =~ s/Gene//;
							#$header = trim($header);
							
							my $pos_hash = index($header,"#");
							my $temp_id_str = substr($header,0,$pos_hash);
						
							my @temp_id_pieces = split("_",$temp_id_str);
							
							$header =~ s/$temp_id_str//;
							
							##now remove all text after the last "#"
							$pos_hash = rindex($header,"#");
							$header = substr($header,0,$pos_hash);
							
							$header = ">$identifier"."_".$temp_id_pieces[2].$header;
							
							$header = padHeader("$header","$num_proteins");	
							print OUT "$header\n";

							my $processed_header = processHeader("$header");
							print PROTEIN_OUT "$processed_header\n";

						}
						else
						{
							print OUT "$line\n";

						}
							
					}
					close OUT;
					
					
					
				}
				
				
			}

		}
		
	
	}

	close PROTEIN_OUT;

	$message = "Done..";
	$priority = 2;
	system "$perl_dir/perl $scripts_dir/logging.pl -v $log -l \'$log_file\' -p $priority -m \'$message\'";
	

}


main;
